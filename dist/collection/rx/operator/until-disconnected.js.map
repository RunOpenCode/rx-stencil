{"version":3,"file":"until-disconnected.js","sourceRoot":"","sources":["../../../src/rx/operator/until-disconnected.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    ComponentInterface,\n    getElement,\n} from '@stencil/core';\nimport {\n    MonoTypeOperatorFunction,\n    Observable,\n    Subject,\n    Subscriber,\n    takeUntil,\n    TeardownLogic,\n} from 'rxjs';\n\n/**\n * A map of component observables that are being watched for\n * disconnect callback invocation. A weak map is being used\n * so that the component instance can be garbage collected.\n *\n * {@internal}\n */\nlet disconnectObservables: WeakMap<ComponentInterface, Observable<void>> = new WeakMap();\n\n/**\n * A function that creates an observable which emits an event\n * when the component is disconnected from DOM.\n *\n * {@internal}\n */\ntype CreateDisconnectObservableFn = (cmp: ComponentInterface) => Observable<void>;\n\n/**\n * Creates an observable that emits a value when the component\n * is disconnected from DOM and method `disconnectedCallback()`\n * is invoked. StencilJS will supress the invocation of this\n * method if it is not defined on the component.\n *\n * {@internal}\n */\nlet createUsingDisconnectedCallback: CreateDisconnectObservableFn = function (cmp: ComponentInterface): Observable<void> {\n    let previousDisconnected: Function | undefined = cmp.disconnectedCallback;\n\n    if (!previousDisconnected) {\n        throw new Error(`Component \"${cmp.constructor.name}\" does not have a \"disconnectedCallback()\" method defined.`);\n    }\n\n    let disconnectedSubject$: Subject<void> = new Subject<void>();\n\n    cmp.disconnectedCallback = function (): void {\n        if (previousDisconnected) {\n            previousDisconnected.call(cmp);\n        }\n\n        disconnectedSubject$.next();\n    };\n\n    return disconnectedSubject$.asObservable();\n}\n\n/**\n * Mutation observer is our next heuristic. We will monitor parent\n * node of the component and emit a value when the component is\n * disconnected from DOM. This will only work, of course, if the\n * component is not the root node of the application and component\n * is already within DOM.\n *\n * {@internal}\n */\nlet createUsingMutationObserver: CreateDisconnectObservableFn = function (cmp: ComponentInterface): Observable<void> {\n    let element: HTMLElement = getElement(cmp);\n\n    if (null === element.parentNode) {\n        throw new Error(`Component \"${cmp.constructor.name}\" is not within DOM.`);\n    }\n\n    return new Observable<void>((observer: Subscriber<void>): TeardownLogic => {\n\n        let mutationObserver: MutationObserver = new MutationObserver((mutations: MutationRecord[]): void => {\n            mutations.forEach((record: MutationRecord): void => {\n                for (let node of Array.from(record.removedNodes)) {\n                    if (node !== element) {\n                        continue;\n                    }\n\n                    observer.next();\n                    observer.complete();\n                }\n            });\n        });\n\n        mutationObserver.observe(element.parentNode, {\n            childList: true,\n            subtree:   true,\n        });\n\n        return (): void => {\n            mutationObserver.disconnect();\n            // we can not re-use this observable, so we have to delete it\n            disconnectObservables.delete(cmp);\n        };\n    });\n\n\n}\n\n/**\n * Creates an observable that emits a value when the component\n * is disconnected from DOM.\n *\n * {@internal}\n */\nfunction createDisconnectObservable(cmp: ComponentInterface): void {\n    let functions: CreateDisconnectObservableFn[] = [\n        createUsingDisconnectedCallback,\n        createUsingMutationObserver,\n    ];\n\n    for (let fn of functions) {\n        try {\n            disconnectObservables.set(cmp, fn(cmp));\n            return;\n        } catch (e) {\n            // noop\n        }\n    }\n\n    throw new Error(`Could not create disconnect observable for component \"${cmp.constructor.name}\".`);\n}\n\n/**\n * Operator that unsubscribes from the source observable when\n * the component is disconnected from DOM.\n */\nexport function untilDisconnected<T = unknown>(cmp: ComponentInterface): MonoTypeOperatorFunction<T> {\n    return (source: Observable<T>): Observable<T> => {\n        if (!disconnectObservables.has(cmp)) {\n            createDisconnectObservable(cmp);\n        }\n\n        let disconnectObservable$: Observable<void> = disconnectObservables.get(cmp);\n\n        return source.pipe(\n            takeUntil<T>(disconnectObservable$),\n        );\n    };\n}\n"]}