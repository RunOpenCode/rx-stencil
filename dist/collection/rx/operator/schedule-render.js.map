{"version":3,"file":"schedule-render.js","sourceRoot":"","sources":["../../../src/rx/operator/schedule-render.ts"],"names":[],"mappings":"AAAA,OAAO,EAEH,WAAW,GACd,MAAM,eAAe,CAAC;AACvB,OAAO,EAGH,GAAG,GACN,MAAM,MAAM,CAAC;AAEd;;;;;;;;GAQG;AACH,MAAM,UAAU,cAAc,CAAc,GAAuB,EAAE,WAAoB,IAAI;EACzF,OAAO,CAAC,MAAqB,EAAiB,EAAE;IAC5C,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAS,EAAE;MAC9B,IAAI,CAAC,QAAQ,EAAE;QACX,WAAW,CAAC,GAAG,CAAC,CAAC;QACjB,OAAO;OACV;MAED,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAS,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC,CAAC;EACR,CAAC,CAAC;AACN,CAAC","sourcesContent":["import {\n    ComponentInterface,\n    forceUpdate,\n} from '@stencil/core';\nimport {\n    MonoTypeOperatorFunction,\n    Observable,\n    tap,\n} from 'rxjs';\n\n/**\n * Schedule a render of the component. This is useful when you\n * want to force a render of the component as result of changing\n * the values of the component which are not tracked by Stencil,\n * observables, for example.\n *\n * By default, the render is scheduled on the next tick, but you\n * can disable this behavior by passing `false` as second argument.\n */\nexport function scheduleRender<T = unknown>(cmp: ComponentInterface, nextTick: boolean = true): MonoTypeOperatorFunction<T> {\n    return (source: Observable<T>): Observable<T> => {\n        return source.pipe(tap((): void => {\n            if (!nextTick) {\n                forceUpdate(cmp);\n                return;\n            }\n\n            Promise.resolve().then((): void => forceUpdate(cmp));\n        }));\n    };\n}\n"]}