{"version":3,"file":"render-observable.js","sourceRoot":"","sources":["../../../src/rx/observable/render-observable.ts"],"names":[],"mappings":"AACA,OAAO,EACH,UAAU,GAGb,MAAkC,MAAM,CAAC;AAE1C;;;;GAIG;AACH,MAAM,UAAU,gBAAgB,CAAC,GAAuB;EACpD,IAAI,UAAU,KAAK,OAAO,GAAG,CAAC,MAAM,EAAE;IAClC,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;GACjE;EAED,OAAO,IAAI,UAAU,CAAO,CAAC,UAA4B,EAAiB,EAAE;IACxE,IAAI,cAAc,GAAc,GAAG,CAAC,MAAM,CAAC;IAE3C,GAAG,CAAC,MAAM,GAAG;MACT,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAS,EAAE;QAC9B,UAAU,CAAC,IAAI,EAAE,CAAC;MACtB,CAAC,CAAC,CAAC;MAEH,OAAO,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC,CAAA;IAED,OAAO,GAAS,EAAE;MACd,GAAG,CAAC,MAAM,GAAG,cAAc,CAAC;IAChC,CAAC,CAAA;EACL,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["import { ComponentInterface } from '@stencil/core';\nimport {\n    Observable,\n    Subscriber,\n    TeardownLogic,\n}                             from 'rxjs';\n\n/**\n * Returns an observable that emits when the component render()\n * function is called. Value will be emitted after the next\n * microtask (next tick).\n */\nexport function renderObservable(cmp: ComponentInterface): Observable<void> {\n    if ('function' !== typeof cmp.render) {\n        throw new Error('Component does not have a render function.');\n    }\n\n    return new Observable<void>((subscriber: Subscriber<void>): TeardownLogic => {\n        let previousRender: () => any = cmp.render;\n\n        cmp.render = function (): any {\n            Promise.resolve().then((): void => {\n                subscriber.next();\n            });\n\n            return previousRender.call(this);\n        }\n\n        return (): void => {\n            cmp.render = previousRender;\n        }\n    });\n}\n"]}