{"version":3,"file":"property-observable.js","sourceRoot":"","sources":["../../../src/rx/observable/property-observable.ts"],"names":[],"mappings":"AACA,OAAO,EACH,eAAe,EACf,oBAAoB,GAEvB,MAAqC,MAAM,CAAC;AAC7C,OAAO,EAAE,qBAAqB,EAAE,MAAM,aAAa,CAAC;AAEpD;;GAEG;AACH,MAAM,UAAU,kBAAkB,CAAU,GAAuB,EAAE,QAAgB;EACjF,IAAI,eAAe,GAAW,+BAA+B,QAAQ,IAAI,CAAC;EAE1E,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE;IACvB,IAAI,UAAU,GAA6B,qBAAqB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAChF,IAAI,cAAc,GAAyB,UAAU,CAAC,GAAG,CAAC;IAC1D,IAAI,cAAc,GAAyB,UAAU,CAAC,GAAG,CAAC;IAE1D,mFAAmF;IACnF,IAAI,YAAY,GAAkB,SAAS,KAAK,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC;IAC7G,IAAI,OAAO,GAAuB,IAAI,eAAe,CAAI,YAAY,CAAC,CAAC;IAEvE,UAAU,CAAC,GAAG,GAAG,UAAU,KAAQ;MAC/B,IAAI,cAAc,EAAE;QAChB,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;OACpC;MAED,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACxB,CAAC,CAAC;IAEF,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;IAEjD,GAAG,CAAC,eAAe,CAAC,GAAG,OAAO,CAAC;GAClC;EAED,OAAO,GAAG,CAAC,eAAe,CAAC;KACtB,YAAY,EAAE;KACd,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;AACtC,CAAC","sourcesContent":["import { ComponentInterface }             from '@stencil/core';\nimport {\n    BehaviorSubject,\n    distinctUntilChanged,\n    Observable,\n}                                from 'rxjs';\nimport { getPropertyDescriptor } from '../../utils';\n\n/**\n * Returns an observable that emits property value when the component property value changes.\n */\nexport function propertyObservable<T = any>(cmp: ComponentInterface, property: string): Observable<T> {\n    let subjectProperty: string = `__rx__subject_for_property__${property}__`;\n\n    if (!cmp[subjectProperty]) {\n        let descriptor: PropertyDescriptor       = getPropertyDescriptor(cmp, property);\n        let previousSetter: Function | undefined = descriptor.set;\n        let previousGetter: Function | undefined = descriptor.get;\n\n        // we have to invoke previous getter on component instance to get the current value\n        let currentValue: T             = undefined !== previousGetter ? previousGetter.call(cmp) : descriptor.value;\n        let subject: BehaviorSubject<T> = new BehaviorSubject<T>(currentValue);\n\n        descriptor.set = function (value: T): void {\n            if (previousSetter) {\n                previousSetter.call(this, value);\n            }\n\n            subject.next(value);\n        };\n\n        Object.defineProperty(cmp, property, descriptor);\n\n        cmp[subjectProperty] = subject;\n    }\n\n    return cmp[subjectProperty]\n        .asObservable()\n        .pipe(distinctUntilChanged());\n}\n"]}