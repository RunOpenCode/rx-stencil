{"version":3,"file":"query-selector-all.js","sourceRoot":"","sources":["../../../src/rx/decorator/query-selector-all.ts"],"names":[],"mappings":"AAAA,OAAO,EAEH,UAAU,GACb,MAAgC,eAAe,CAAC;AACjD,OAAO,EACH,oBAAoB,EACpB,GAAG,EAEH,WAAW,EACX,SAAS,GACZ,MAAgC,MAAM,CAAC;AACxC,OAAO,EAAE,gBAAgB,EAAE,MAAM,eAAe,CAAC;AACjD,OAAO,EAAE,eAAe,EAAE,MAAO,kBAAkB,CAAC;AAiBpD;;;;;;GAMG;AACH,MAAM,UAAU,gBAAgB,CAAsC,QAAgB,EAAE,OAAiC;EACrH,OAAO,CAAC,MAAgB,EAAE,QAAgB,EAAQ,EAAE;IAChD,IAAI,UAAU,GAAuB;MACjC,GAAG,EAAE;QACD,MAAM,IAAI,KAAK,CAAC,aAAa,QAAQ,iBAAiB,CAAC,CAAC;MAC5D,CAAC;MACD,GAAG,EAAE;QACD,IAAI,kBAAkB,GAAW,sDAAsD,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,UAAU,EAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,wBAAwB,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,gBAAgB,EAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,eAAe,QAAQ,IAAI,CAAC;QAErN,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE;UAC3B,IAAI,IAAI,GAA6B,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,UAAU,EAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;UAC1G,IAAI,UAAU,GAAuB,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,gBAAgB,EAAC,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;UAEhH,IAAI,CAAC,kBAAkB,CAAC,GAAG,UAAU,CAAC,IAAI,CACtC,SAAS,EAAE,EACX,GAAG,CAAC,GAAQ,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAC3D,oBAAoB,CAAC,CAAC,QAAa,EAAE,OAAY,EAAW,EAAE;YAC1D,IAAI,QAAQ,CAAC,MAAM,KAAK,OAAO,CAAC,MAAM,EAAE;cACpC,OAAO,KAAK,CAAC;aAChB;YAED,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;cAC9C,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC,EAAE;gBAC5B,OAAO,KAAK,CAAC;eAChB;aACJ;YAED,OAAO,IAAI,CAAC;UAChB,CAAC,CAAC,EACF,WAAW,CAAC,CAAC,CAAC,CACjB,CAAC;SACL;QAED,OAAO,IAAI,CAAC,kBAAkB,CAAC,CAAC;MACpC,CAAC;KACJ,CAAA;IAED,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;EACxD,CAAC,CAAC;AACN,CAAC","sourcesContent":["import {\n    ComponentInterface,\n    getElement,\n}                           from '@stencil/core';\nimport {\n    distinctUntilChanged,\n    map,\n    Observable,\n    shareReplay,\n    startWith,\n}                           from 'rxjs';\nimport { renderObservable } from '../observable';\nimport { observeSubNodes }  from './query-selector';\n\n/**\n * Options for QuerySelectorAll decorator.\n */\nexport type QuerySelectorAllOptions = {\n    /**\n     * If `true`, the elements will be searched in the shadow root. Default is `false`.\n     */\n    shadowRoot?: boolean;\n    /**\n     * If `true`, mutation observer instead of `renderObservable` from this package will\n     * be used to detect changes. Default is `false`.\n     */\n    mutationObserver?: boolean;\n};\n\n/**\n * Property decorator inspired by Angular's @ViewChild/@ContentChild.\n *\n * After each render, the decorated property will be set to the first element\n * matching the given selector. If no element is found, the property will be\n * set to null.\n */\nexport function QuerySelectorAll<T extends HTMLElement = HTMLElement>(selector: string, options?: QuerySelectorAllOptions): any {\n    return (target: Function, property: string): void => {\n        let descriptor: PropertyDescriptor = {\n            set: function (): void {\n                throw new Error(`Property \"${property}\" is read-only.`);\n            },\n            get: function (this: ComponentInterface): Observable<T | null> {\n                let observableProperty: string = `__rx__query_selector_all__observable__shadow_root__${options?.shadowRoot ? 'yes' : 'no'}__mutation_observer__${options?.mutationObserver ? 'yes' : 'no'}__selector__${selector}__`;\n\n                if (!this[observableProperty]) {\n                    let root: HTMLElement | ShadowRoot = options?.shadowRoot ? getElement(this).shadowRoot : getElement(this);\n                    let observable: Observable<void>   = options?.mutationObserver ? observeSubNodes(root) : renderObservable(this);\n\n                    this[observableProperty] = observable.pipe(\n                        startWith(),\n                        map((): T[] => Array.from(root.querySelectorAll(selector))),\n                        distinctUntilChanged((previous: T[], current: T[]): boolean => {\n                            if (previous.length !== current.length) {\n                                return false;\n                            }\n\n                            for (let i: number = 0; i < previous.length; i++) {\n                                if (previous[i] !== current[i]) {\n                                    return false;\n                                }\n                            }\n\n                            return true;\n                        }),\n                        shareReplay(1),\n                    );\n                }\n\n                return this[observableProperty];\n            },\n        }\n\n        Object.defineProperty(target, property, descriptor);\n    };\n}\n"]}