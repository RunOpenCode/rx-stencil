{"version":3,"file":"query-selector.js","sourceRoot":"","sources":["../../../src/rx/decorator/query-selector.ts"],"names":[],"mappings":"AAAA,OAAO,EAEH,UAAU,GACb,MAAM,eAAe,CAAC;AACvB,OAAO,EACH,oBAAoB,EACpB,MAAM,EACN,GAAG,EAEH,WAAW,EACX,SAAS,GACZ,MAAM,MAAM,CAAC;AACd,OAAO,EACH,kBAAkB,EAClB,gBAAgB,GACnB,MAAM,eAAe,CAAC;AAiBvB;;;;;GAKG;AACH,MAAM,UAAU,eAAe,CAAC,MAAY;EACxC,OAAO,kBAAkB,CAAC,MAAM,EAAE;IAC9B,OAAO,EAAI,IAAI;IACf,SAAS,EAAE,IAAI;GAClB,CAAC,CAAC,IAAI,CACH,MAAM,CAAC,CAAC,OAAyB,EAAW,EAAE;IAC1C,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;MAC7C,IAAI,WAAW,KAAK,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;QACjC,SAAS;OACZ;MAED,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,EAAE;QAChE,OAAO,IAAI,CAAC;OACf;KACJ;IAED,OAAO,KAAK,CAAC;EACjB,CAAC,CAAC,EACF,GAAG,CAAC,GAAS,EAAE;IACX,UAAU;EACd,CAAC,CAAC,CACL,CAAC;AACN,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,aAAa,CAAsC,QAAgB,EAAE,OAA8B;EAC/G,OAAO,CAAC,MAAgB,EAAE,QAAgB,EAAQ,EAAE;IAChD,IAAI,UAAU,GAAuB;MACjC,GAAG,EAAE;QACD,MAAM,IAAI,KAAK,CAAC,aAAa,QAAQ,iBAAiB,CAAC,CAAC;MAC5D,CAAC;MACD,GAAG,EAAE;QACD,IAAI,kBAAkB,GAAW,kDAAkD,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,UAAU,EAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,wBAAwB,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,gBAAgB,EAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,eAAe,QAAQ,IAAI,CAAC;QAEjN,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE;UAC3B,IAAI,IAAI,GAA6B,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,UAAU,EAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;UAC1G,IAAI,UAAU,GAAuB,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,gBAAgB,EAAC,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;UAEhH,IAAI,CAAC,kBAAkB,CAAC,GAAG,UAAU,CAAC,IAAI,CACtC,SAAS,EAAE,EACX,GAAG,CAAC,GAAM,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,EAC1C,oBAAoB,EAAE,EACtB,WAAW,CAAC,CAAC,CAAC,CACjB,CAAC;SACL;QAED,OAAO,IAAI,CAAC,kBAAkB,CAAC,CAAC;MACpC,CAAC;KACJ,CAAA;IAED,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;EACxD,CAAC,CAAC;AACN,CAAC","sourcesContent":["import {\n    ComponentInterface,\n    getElement,\n} from '@stencil/core';\nimport {\n    distinctUntilChanged,\n    filter,\n    map,\n    Observable,\n    shareReplay,\n    startWith,\n} from 'rxjs';\nimport {\n    mutationObservable,\n    renderObservable,\n} from '../observable';\n\n/**\n * Options for QuerySelector decorator.\n */\nexport type QuerySelectorOptions = {\n    /**\n     * If `true`, the element will be searched in the shadow root. Default is `false`.\n     */\n    shadowRoot?: boolean;\n    /**\n     * If `true`, mutation observer instead of `renderObservable` from this package will\n     * be used to detect changes. Default is `false`.\n     */\n    mutationObserver?: boolean;\n};\n\n/**\n * Observe all sub nodes of the given node and notify\n * when any of them is removed and/or added.\n *\n * {@internal}\n */\nexport function observeSubNodes(target: Node): Observable<void> {\n    return mutationObservable(target, {\n        subtree:   true,\n        childList: true,\n    }).pipe(\n        filter((records: MutationRecord[]): boolean => {\n            for (let i: number = 0; i < records.length; i++) {\n                if ('childList' !== records[i].type) {\n                    continue;\n                }\n\n                if (records[i].addedNodes.length || records[i].removedNodes.length) {\n                    return true;\n                }\n            }\n\n            return false;\n        }),\n        map((): void => {\n            /* noop */\n        }),\n    );\n}\n\n/**\n * Property decorator inspired by Angular's @ViewChild/@ContentChild.\n *\n * After each render, the decorated property will be set to the first element\n * matching the given selector. If no element is found, the property will be\n * set to null.\n */\nexport function QuerySelector<T extends HTMLElement = HTMLElement>(selector: string, options?: QuerySelectorOptions): any {\n    return (target: Function, property: string): void => {\n        let descriptor: PropertyDescriptor = {\n            set: function (): void {\n                throw new Error(`Property \"${property}\" is read-only.`);\n            },\n            get: function (this: ComponentInterface): Observable<T | null> {\n                let observableProperty: string = `__rx__query_selector__observable__shadow_root__${options?.shadowRoot ? 'yes' : 'no'}__mutation_observer__${options?.mutationObserver ? 'yes' : 'no'}__selector__${selector}__`;\n\n                if (!this[observableProperty]) {\n                    let root: HTMLElement | ShadowRoot = options?.shadowRoot ? getElement(this).shadowRoot : getElement(this);\n                    let observable: Observable<void>   = options?.mutationObserver ? observeSubNodes(root) : renderObservable(this);\n\n                    this[observableProperty] = observable.pipe(\n                        startWith(),\n                        map((): T => root.querySelector(selector)),\n                        distinctUntilChanged(),\n                        shareReplay(1),\n                    );\n                }\n\n                return this[observableProperty];\n            },\n        }\n\n        Object.defineProperty(target, property, descriptor);\n    };\n}\n"]}