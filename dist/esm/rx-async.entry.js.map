{"file":"rx-async.entry.js","mappings":";;;AAEO,SAAS,EAAE,CAAC,GAAG,IAAI,EAAE;AAC5B,IAAI,MAAM,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;AACzC,IAAI,OAAO,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AACjC;;ACHO,SAAS,YAAY,CAAC,GAAG,EAAE;AAClC,IAAI,OAAO,CAAC,CAAC,GAAG,KAAK,GAAG,YAAY,UAAU,KAAK,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;AACvG;;ACDO,SAAS,SAAS,CAAC,OAAO,EAAE,cAAc,EAAE;AACnD,IAAI,OAAO,OAAO,CAAC,CAAC,MAAM,EAAE,UAAU,KAAK;AAC3C,QAAQ,IAAI,eAAe,GAAG,IAAI,CAAC;AACnC,QAAQ,IAAI,KAAK,GAAG,CAAC,CAAC;AACtB,QAAQ,IAAI,UAAU,GAAG,KAAK,CAAC;AAC/B,QAAQ,MAAM,aAAa,GAAG,MAAM,UAAU,IAAI,CAAC,eAAe,IAAI,UAAU,CAAC,QAAQ,EAAE,CAAC;AAC5F,QAAQ,MAAM,CAAC,SAAS,CAAC,wBAAwB,CAAC,UAAU,EAAE,CAAC,KAAK,KAAK;AACzE,YAAY,eAAe,KAAK,IAAI,IAAI,eAAe,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,eAAe,CAAC,WAAW,EAAE,CAAC;AAC5G,YAAY,IAAI,UAAU,GAAG,CAAC,CAAC;AAC/B,YAAY,MAAM,UAAU,GAAG,KAAK,EAAE,CAAC;AACvC,YAAY,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC,SAAS,EAAE,eAAe,GAAG,wBAAwB,CAAC,UAAU,EAAE,CAAC,UAAU,KAAK,UAAU,CAAC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC,KAAK,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,GAAG,UAAU,CAAC,EAAE,MAAM;AACtP,gBAAgB,eAAe,GAAG,IAAI,CAAC;AACvC,gBAAgB,aAAa,EAAE,CAAC;AAChC,aAAa,CAAC,EAAE,CAAC;AACjB,SAAS,EAAE,MAAM;AACjB,YAAY,UAAU,GAAG,IAAI,CAAC;AAC9B,YAAY,aAAa,EAAE,CAAC;AAC5B,SAAS,CAAC,CAAC,CAAC;AACZ,KAAK,CAAC,CAAC;AACP;;ACtBA,MAAM,SAAS,GAAG,6BAA6B;;MC0BlC,KAAK;;;IAKN,WAAM,GAAY,IAAI,CAAC;iBAFJ,IAAI;;EAIxB,iBAAiB;IACpB,kBAAkB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,IAAI,CAClC,SAAS,CAAC,CAAC,KAAiB;MACxB,IAAI,YAAY,CAAC,KAAK,CAAC,EAAE;QACrB,OAAO,KAAK,CAAC;OAChB;MAED,IAAI,KAAK,YAAY,OAAO,EAAE;QAC1B,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;OACtB;MAED,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;KACpB,CAAC,CACL,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,EAAE,QAAQ,EAAE;MACpC,cAAc,EAAE,IAAI;MACpB,QAAQ,EAAQ,KAAK;KACxB,CAAC,CAAC,CAAC;GACP;EAEM,oBAAoB;;GAE1B;EAEM,MAAM;IACT,QACI,EAAC,IAAI,QACA,IAAI,CAAC,MAAM,CACT,EACV;GACJ;;;;;;","names":[],"sources":["node_modules/rxjs/dist/esm/internal/observable/of.js","node_modules/rxjs/dist/esm/internal/util/isObservable.js","node_modules/rxjs/dist/esm/internal/operators/switchMap.js","src/components/async/async.scss?tag=rx-async","src/components/async/async.tsx"],"sourcesContent":["import { popScheduler } from '../util/args';\nimport { from } from './from';\nexport function of(...args) {\n    const scheduler = popScheduler(args);\n    return from(args, scheduler);\n}\n//# sourceMappingURL=of.js.map","import { Observable } from '../Observable';\nimport { isFunction } from './isFunction';\nexport function isObservable(obj) {\n    return !!obj && (obj instanceof Observable || (isFunction(obj.lift) && isFunction(obj.subscribe)));\n}\n//# sourceMappingURL=isObservable.js.map","import { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function switchMap(project, resultSelector) {\n    return operate((source, subscriber) => {\n        let innerSubscriber = null;\n        let index = 0;\n        let isComplete = false;\n        const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();\n            let innerIndex = 0;\n            const outerIndex = index++;\n            innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = createOperatorSubscriber(subscriber, (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue), () => {\n                innerSubscriber = null;\n                checkComplete();\n            })));\n        }, () => {\n            isComplete = true;\n            checkComplete();\n        }));\n    });\n}\n//# sourceMappingURL=switchMap.js.map",":host {\n    display: inline-block;\n}","import {\n    Component,\n    ComponentInterface,\n    h,\n    Host,\n    Prop,\n} from '@stencil/core';\nimport {\n    from,\n    isObservable,\n    Observable,\n    of,\n    switchMap,\n} from 'rxjs';\nimport {\n    propertyObservable,\n    setProperty,\n} from '../../rx';\n\nexport type AsyncValue = Promise<unknown> | Observable<unknown> | null | undefined;\n\n@Component({\n    tag:      'rx-async',\n    shadow:   false,\n    styleUrl: 'async.scss',\n})\nexport class Async implements ComponentInterface {\n\n    @Prop()\n    public value: AsyncValue = null;\n\n    private _value: unknown = null;\n\n    public connectedCallback(): void {\n        propertyObservable(this, 'value').pipe(\n            switchMap((value: AsyncValue): Observable<unknown> => {\n                if (isObservable(value)) {\n                    return value;\n                }\n\n                if (value instanceof Promise) {\n                    return from(value);\n                }\n\n                return of(value);\n            }),\n        ).subscribe(setProperty(this, '_value', {\n            scheduleRender: true,\n            nextTick:       false,\n        }));\n    }\n\n    public disconnectedCallback(): void {\n        // noop\n    }\n\n    public render(): any {\n        return (\n            <Host>\n                {this._value}\n            </Host>\n        )\n    }\n}"],"version":3}